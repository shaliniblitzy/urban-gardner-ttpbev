#!/usr/bin/env sh

# Enhanced Gradle wrapper script for Garden Planner Android application
# Version: 1.0
# Requires: Java 11+, Gradle 8.0+
# Security: SHA-256 verification, HTTPS enforcement
# Performance: Parallel execution, optimized memory settings

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

# Enhanced JVM options for optimal Gradle performance
DEFAULT_JVM_OPTS='"-Xmx2048m" "-Xms512m" "-Dfile.encoding=UTF-8" "-Dorg.gradle.parallel=true" "-XX:+HeapDumpOnOutOfMemoryError"'

# Enhanced Gradle options for build optimization
GRADLE_OPTS='"-Dorg.gradle.daemon=true" "-Dorg.gradle.caching=true" "-Dkotlin.incremental=true"'

# Use the maximum available, or set MAX_FD != -1 to use that value
MAX_FD="maximum"

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# Enhanced Java detection with version validation
find_java_home () {
    # Check JAVA_HOME environment variable first
    if [ -n "$JAVA_HOME" ] ; then
        if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
            # IBM's JDK on AIX uses strange locations
            JAVA_EXE="$JAVA_HOME/jre/sh/java"
        else
            JAVA_EXE="$JAVA_HOME/bin/java"
        fi
        if [ -x "$JAVA_EXE" ] ; then
            # Validate Java version
            java_version=$("$JAVA_EXE" -version 2>&1 | awk -F '"' '/version/ {print $2}')
            if [ "$(echo $java_version | cut -d. -f1)" -ge "11" ]; then
                return 0
            else
                warn "Found Java installation but version $java_version is less than required 11"
            fi
        fi
    fi

    # Search common Java installation locations
    common_locations="/usr/java/latest /usr/lib/jvm/java-11* /usr/lib/jvm/java-11-openjdk* /usr/lib/jvm/java-11-oracle* /Library/Java/JavaVirtualMachines/*/Contents/Home"
    for java_home in $common_locations; do
        if [ -x "$java_home/bin/java" ]; then
            JAVA_HOME="$java_home"
            JAVA_EXE="$JAVA_HOME/bin/java"
            java_version=$("$JAVA_EXE" -version 2>&1 | awk -F '"' '/version/ {print $2}')
            if [ "$(echo $java_version | cut -d. -f1)" -ge "11" ]; then
                return 0
            fi
        fi
    done

    die "ERROR: Unable to find a compatible Java installation (version >= 11)"
}

# Enhanced Gradle distribution validation
validate_gradle_distribution () {
    DISTRIBUTION_URL="$1"
    EXPECTED_CHECKSUM="$2"
    
    # Verify HTTPS protocol
    case $DISTRIBUTION_URL in
        https://*) : ;;
        *) die "ERROR: Gradle distribution URL must use HTTPS protocol" ;;
    esac

    # Download distribution if not present
    GRADLE_DIR="$APP_HOME/gradle/wrapper/dists"
    [ -d "$GRADLE_DIR" ] || mkdir -p "$GRADLE_DIR"
    
    DISTRIBUTION_FILE="$GRADLE_DIR/$(basename $DISTRIBUTION_URL)"
    if [ ! -f "$DISTRIBUTION_FILE" ]; then
        warn "Downloading Gradle distribution..."
        curl -L --silent --show-error --fail "$DISTRIBUTION_URL" -o "$DISTRIBUTION_FILE" || die "Failed to download Gradle distribution"
    fi

    # Validate checksum if provided
    if [ -n "$EXPECTED_CHECKSUM" ]; then
        actual_checksum=$(sha256sum "$DISTRIBUTION_FILE" | cut -d' ' -f1)
        [ "$actual_checksum" = "$EXPECTED_CHECKSUM" ] || die "ERROR: Gradle distribution checksum verification failed"
    fi
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$(uname)" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MSYS* | MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

# Enhanced classpath handling
CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Validate Java installation
find_java_home

# Validate Gradle distribution
GRADLE_PROPERTIES="$APP_HOME/gradle/wrapper/gradle-wrapper.properties"
[ -f "$GRADLE_PROPERTIES" ] || die "ERROR: Gradle wrapper properties file not found"

DISTRIBUTION_URL=$(grep "distributionUrl" "$GRADLE_PROPERTIES" | cut -d= -f2 | tr -d '\\')
EXPECTED_CHECKSUM=$(grep "distributionSha256Sum" "$GRADLE_PROPERTIES" | cut -d= -f2)
validate_gradle_distribution "$DISTRIBUTION_URL" "$EXPECTED_CHECKSUM"

# Enhanced platform-specific defaults
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
    JAVA_HOME=$( cygpath --path --mixed "$JAVA_HOME" )
    
    # Add Windows-specific memory settings
    DEFAULT_JVM_OPTS="$DEFAULT_JVM_OPTS \"-Dfile.encoding=UTF-8\""
fi

# Collect all arguments for the java command
set -- \
        "$DEFAULT_JVM_OPTS" \
        $JAVA_OPTS \
        $GRADLE_OPTS \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Enhanced error handling for exec
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    exec "$JAVA_EXE" "$@" 2>&1 || die "ERROR: Gradle execution failed"
else
    exec "$JAVA_EXE" "$@" 2>&1 || die "ERROR: Gradle execution failed"
fi