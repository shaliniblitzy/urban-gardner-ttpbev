name: Garden Planner Web CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'
      - 'infrastructure/docker/web.Dockerfile'
      - 'infrastructure/kubernetes/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'
      - 'infrastructure/docker/web.Dockerfile'
      - 'infrastructure/kubernetes/**'

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'garden-planner-web'
  TEST_COVERAGE_THRESHOLD: 80
  NODE_ENV: production

jobs:
  build-test-deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://garden-planner.example.com

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install dependencies
        working-directory: src/web
        run: |
          npm ci
          npm audit fix

      - name: Run linting
        working-directory: src/web
        run: npm run lint

      - name: Run type checking
        working-directory: src/web
        run: npm run type-check

      - name: Run tests with coverage
        working-directory: src/web
        run: |
          npm test -- --coverage --coverageThreshold.global.statements=${{ env.TEST_COVERAGE_THRESHOLD }}
        env:
          CI: true

      - name: Build application
        working-directory: src/web
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.API_URL }}
          REACT_APP_VERSION: ${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@v0.9.2
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: infrastructure/docker/web.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
            API_URL=${{ secrets.API_URL }}
            BUILD_VERSION=${{ github.sha }}

      - name: Set up Kubernetes context
        if: github.event_name != 'pull_request'
        uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        if: github.event_name != 'pull_request'
        uses: azure/k8s-deploy@v4
        with:
          namespace: default
          manifests: |
            infrastructure/kubernetes/web-deployment.yaml
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          strategy: rolling
          timeout: 5m
          rollback-on-failure: true

      - name: Verify deployment
        if: github.event_name != 'pull_request'
        run: |
          kubectl rollout status deployment/garden-planner-web -n default --timeout=300s
          kubectl get deployment garden-planner-web -n default -o wide

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true